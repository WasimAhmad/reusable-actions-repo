name: 'Copacetic Patching'
description: 'Patches Docker images based on vulnerability scan report'
inputs:
  trivy-report:
    required: true
    description: 'Vulnerability scan report file'
  region:
    description: 'GCP Region for Artifact Registry'
    required: true
  projectId:
    description: 'GCP Project ID'
    required: true
  repository:
    description: 'Docker Repository'
    required: true
  gcrCredentials:
    description: 'Google Cloud service account key for authentication.'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Download Image Name Artifact
      uses: actions/download-artifact@v2
      with:
        name: image-name
        path: .
        
    - name: Read Image Name
      id: read-imagename
      run: |
        echo "::set-output name=imagename::$(cat image_name.txt)"
      shell: bash
        
    - name: Download Vulnerability Report as an artifact
      uses: actions/download-artifact@v2
      with:
        name: vul-artifact
        path: .

    - name: Check vulnerability count
      id: vuln_count
      run: |
        report_file=${{inputs.trivy-report}}
        vuln_count=$(jq 'if .Results then [.Results[] | select(.Class=="os-pkgs" and .Vulnerabilities!=null) | .Vulnerabilities[]] | length else 0 end' "$report_file")
        echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT
      shell: bash

    - name: Set up Google Cloud
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ inputs.gcrCredentials }}
        project_id: ${{ inputs.projectId }}

    - name: Configure Docker for Google Artifact Registry
      if: steps.vuln_count.outputs.vuln_count != '0'
      run: gcloud auth configure-docker ${{ inputs.region }}-docker.pkg.dev
      shell: bash
    - name: Pull image
      if: steps.vuln_count.outputs.vuln_count != '0'
      run: |
        sudo docker pull gcr.io//${{ inputs.projectId }}/${{ steps.read-imagename.outputs.imagename }}
      shell: bash
    - name: Download and Extract Copacetic CLI
      if: steps.vuln_count.outputs.vuln_count != '0'
      run: |
        curl -L "https://github.com/project-copacetic/copacetic/releases/download/v0.6.2/copa_0.6.2_linux_amd64.tar.gz" -o copa.tar.gz
        tar -xzf copa.tar.gz
        chmod +x copa
      shell: bash
    - name: Run Copacetic Patching with CLI
      if: steps.vuln_count.outputs.vuln_count != '0'
      run: |
        ./copa patch \
          -i gcr.io/${{ inputs.projectId }}/${{ steps.read-imagename.outputs.imagename }} \
          -r ${{ inputs.trivy-report }} 
      shell: bash
    - name: Push patched image
      if: steps.vuln_count.outputs.vuln_count != '0'
      run: |
        sudo docker tag 'gcr.io/${{ inputs.projectId }}/${{ steps.read-imagename.outputs.imagename }}-patched' gcr.io/${{ inputs.projectId }}/${{ steps.read-imagename.outputs.imagename }}
        sudo docker push gcr.io/${{ inputs.projectId }}/${{ steps.read-imagename.outputs.imagename }}
      shell: bash